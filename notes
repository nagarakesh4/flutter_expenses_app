widgets/styling/adding logic
Layout widgets:
    Row: take multiple children
        flexible widget
        expanded widget
        
    Column : take multiple children
        flexible widget
        expanded widget

    Container

Content container:
    Stack: items on top of each other (image with text in foreground)
    Card: prestyled container (padding/boxshadow) - with default styles

Repeating content:
    List View:
        List Tile: 
    Grid View:

Content Types:
    Icon
    text
    image

User Input
    text field
    raised button

Hidden widget:
    inkwell (tap, doubletap)
    gesture


70. Add scaffolding new flutter project

    1. add column widget in body, with two children containing card widgets for chart of expense and list of transactions
    2. card by default assumes the size of its children, so change the size of child, so change size of text which means change size of its parent, to break this dependency, there are 2 ways:
        - use Container wrap on top of card child and set its width to 100, there by the card will no longer rely on the size of text but will rely on size of container with space as double.infinitly  (take as much as width as it can)
        - instead of wrapping the child of card with container, wrap the card itself with container and it is same as the previous one. the implication however is the card by default depends on its child (text) unless there is a parent (container) with a container, 
            but this option doesn't work with column, column always depends on its children (the broadest width), card however takes its parent as the measurement

71.
    3. column has crossAxisAlignment (left to right), default is top to bottom (mainAxisAlignment)
        mainAxisAlignment.center (default is start) - is like flex-end etc.., similar to flex the other options are available (spacebetween etc)
        crossAxisAlignment: CrossAxisAlignment.end, will move the element on left to right to right most
        using this the card now follows the parent width which is set by 'column' widget usign the above axis alignments
    4. in row it is the opposite of above

Jot:
    Rows and Columns are used to organize multiple sibling widgets. (can have more than one child widget)
    By default Columns take all the height space they can get.
    you can absolutely have a Row in a Column, a Column in a Row or Rows in Rows / Columns in Columns.


72.
    5. for the app, we need to add 'transactions'. create a map to store the list of transactions
    6. store the transaction as a separate blueprint (transaction.dart) doesnt extend stateless/stateful, and not needed to extend Widget 
    7. it takes variables requeired and a named argument constructor
    8. add required annotation from foundation.dart
    9. in main.dart create a list entry to store these transactions
    10. create a column for loading transactions in main.dart , take transaction list and create a map of it. instead of an explicit widgets, create a list of widgets
    11. .map returns an iterable so we need to explicitly convert into a list using .toList (see notes1 for more)

74.
    12. transaction should be shown as  card, with two rows and the second row having two columns, and each of the row element is in a container

75.
    13. no separate styling lang, we style widgets through arguments, so in case  if a widget doesn't have styling to it (ex: text), we need to leverage other widgets (create new or its parent)
    14. always create margin using EdgetInsets. - margin in all direction, 'only' to specify separately, symmetric
    15. to style the appearance of container, using decoration property that uses boxdecoration widget(not every widget will have it)
        and inside boxdecoration widget it takes in border color, width etc
        similarly padding takes EdgetInsets and can use .all(10) - to have padding of 10 on all sides
76. 16. text styling
    text will have style property and can use TextStyle widget to style the text and inside it use fontWeight property with FontWeight.bold, FontWeight is class with prop, static props are basically enums but with labels (instead of numbers)
    and similarly font size, and the container will grow with the content

77.
    set crossAxisAlignment to left for title and date
    adjust text style properties

Jot:
    you configure widgets via their constructor arguments - that includes styling config.
    Container has 'decoration' argument that uses BoxDecoration() and creates a decoration object which you can configure in many different ways (e.g. border, radius, color) via its constructor arguments.

78.
    Container: 
        takes only one widget as children
        allows to add padding, decoration, border, color, padding, 
        flexible width: by default takes child width, but also takes parent width if one, also set width on the container - order exists
        perfect for custom styling and alignment
    Column/Row:
        takes multiple children as widgets
        allows CrossAxisAlignment and mainAxisAlignment but that's it no styling options
        Column takes full available height
        Row takes full available width
        must-use if widgets sit next to above/below
    can mix and match the above two

79.
    String interpolation:
        1. + works
        2. interpolate: '\$${tx.amount}'

80.
    Dates
    look for 'dart dateformat' - look for pub.dev - has packages that we can install in our dart project
    look for 'intl'
    add the dependency in pubspec.yaml under 'dependencies' section
    saving should get the package automatically, if not run flutter packages get - to get all packages downloaded
    source code the dependencies package (ex: node_modules) is not stored in the project folder but in /user folder, just a connection is established
    import 'package:intl/intl.dart';
    and use as DateFormat().format(tx.dateTime) - then stop and start the simulator for the package to be reflected
    to define custom patterns
        DateFormat('yyyy-mm-dd')
        or just call that pattern as DateFormat().add_yMMMd()



